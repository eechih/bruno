type Mutation {
  updateFBCookie(input: UpdateFBCookieInput!): FBCookie
  updateBP1Cookie(input: UpdateBP1CookieInput!): BP1Cookie
  createProduct(input: CreateProductInput!): Product
  updateProduct(input: UpdateProductInput!): Product
  deleteProduct(input: DeleteProductInput!): Product
  asyncPublishProduct(input: PublishProductInput!): Product
}

type Query {
  getSettings: Settings
  getProduct(id: ID!): Product @aws_api_key @aws_cognito_user_pools
  listProducts(
    filter: TableProductFilterInput
    limit: Int
    nextToken: String
  ): ProductConnection
}

type Product @aws_api_key @aws_cognito_user_pools {
  id: ID!
  name: String
  description: String
  price: Int
  cost: Int
  options: [[String]]
  images: [String]
  provider: String
  offShelfAt: AWSDateTime
  fbMessage: String
  fbGroupId: String
  fbPostId: String
  fbPostedAt: AWSDateTime
  bp1ProductId: String
  bp1CreatedAt: AWSDateTime
  publishState: String
  createdAt: AWSDateTime
  updatedAt: AWSDateTime
  owner: String!
}

type ProductConnection {
  items: [Product]
  scannedCount: Int
  nextToken: String
}

input CreateProductInput {
  name: String
  description: String
  price: Int
  cost: Int
  options: [[String]]
  images: [String]
  provider: String
  offShelfAt: AWSDateTime
  fbMessage: String
  fbGroupId: String
}

input UpdateProductInput {
  id: ID!
  name: String
  description: String
  price: Int
  cost: Int
  options: [[String]]
  images: [String]
  provider: String
  offShelfAt: AWSDateTime
  fbMessage: String
  fbGroupId: String
}

input DeleteProductInput {
  id: ID!
}

input PublishProductInput {
  id: ID!
}

input TableProductFilterInput {
  id: TableIDFilterInput
  name: TableStringFilterInput
}

input TableBooleanFilterInput {
  ne: Boolean
  eq: Boolean
}

input TableFloatFilterInput {
  ne: Float
  eq: Float
  le: Float
  lt: Float
  ge: Float
  gt: Float
  contains: Float
  notContains: Float
  between: [Float]
}

input TableIDFilterInput {
  ne: ID
  eq: ID
  le: ID
  lt: ID
  ge: ID
  gt: ID
  contains: ID
  notContains: ID
  between: [ID]
  beginsWith: ID
}

input TableIntFilterInput {
  ne: Int
  eq: Int
  le: Int
  lt: Int
  ge: Int
  gt: Int
  contains: Int
  notContains: Int
  between: [Int]
}

input TableStringFilterInput {
  ne: String
  eq: String
  le: String
  lt: String
  ge: String
  gt: String
  contains: String
  notContains: String
  between: [String]
  beginsWith: String
}

type Settings {
  owner: ID!
  profile: Profile
  fbCookie: FBCookie
  bp1Cookie: BP1Cookie
  createdAt: AWSDateTime!
}

type Profile {
  name: String!
}

type FBCookie {
  fr: String
  xs: String
  datr: String
  c_user: String
  wd: String
  sb: String
  updatedAt: String!
}

type BP1Cookie {
  currency: String
  __cf_bm: String
  __Secure_PHPSESSID: String
  updatedAt: String!
}

input UpdateFBCookieInput {
  fr: String
  xs: String
  datr: String
  c_user: String
  wd: String
  sb: String
}

input UpdateBP1CookieInput {
  currency: String
  __cf_bm: String
  __Secure_PHPSESSID: String
}
