type Mutation {
  createProduct(input: CreateProductInput!): Product
  updateProduct(input: UpdateProductInput!): Product
  deleteProduct(input: DeleteProductInput!): Product
  createDataPoint(input: CreateDataPointInput!): DataPoint
  updateDataPoint(input: UpdateDataPointInput!): DataPoint
  deleteDataPoint(input: DeleteDataPointInput!): DataPoint
}

type Query {
  getProduct(id: ID!): Product
  listProducts(
    filter: TableProductFilterInput
    limit: Int
    nextToken: String
  ): ProductConnection
  getDataPoint(name: ID!, createdAt: AWSDateTime!): DataPoint
  listDataPoints(
    filter: TableDataPointFilterInput
    limit: Int
    nextToken: String
  ): DataPointConnection
  queryDataPointsByNameAndDateTime(
    name: ID!
    createdAt: ModelStringKeyConditionInput
    sortDirection: ModelSortDirection
    filter: TableDataPointFilterInput
    limit: Int
    nextToken: String
  ): DataPointConnection
}

type Subscription {
  onCreateDataPoint(
    owner: String!
    name: ID
    createdAt: AWSDateTime
    value: Int
  ): DataPoint @aws_subscribe(mutations: ["createDataPoint"])
  onUpdateDataPoint(name: ID, createdAt: AWSDateTime, value: Int): DataPoint
    @aws_subscribe(mutations: ["updateDataPoint"])
  onDeleteDataPoint(name: ID, createdAt: AWSDateTime, value: Int): DataPoint
    @aws_subscribe(mutations: ["deleteDataPoint"])
}

type Product {
  id: ID!
  name: String
  description: String
  price: Int
  cost: Int
  optionGrid: [String]
  images: [String]
  provider: String
  offShelfAt: AWSDateTime
  publishAt: AWSDateTime
  createdAt: AWSDateTime
  updatedAt: AWSDateTime
  owner: String
}

type ProductConnection {
  items: [Product]
  nextToken: String
}

input CreateProductInput {
  name: String!
  description: String
  price: Int!
  cost: Int
  optionGrid: [String]
  images: [String]
  provider: String
  offShelfAt: AWSDateTime
  publishAt: AWSDateTime
}

input UpdateProductInput {
  id: ID!
  name: String
  description: String
  price: Int
  cost: Int
  optionGrid: [String]
  images: [String]
  provider: String
  offShelfAt: AWSDateTime
  publishAt: AWSDateTime
}

input DeleteProductInput {
  id: ID!
}

input TableProductFilterInput {
  id: TableIDFilterInput
  name: TableStringFilterInput
}

input TableBooleanFilterInput {
  ne: Boolean
  eq: Boolean
}

input TableFloatFilterInput {
  ne: Float
  eq: Float
  le: Float
  lt: Float
  ge: Float
  gt: Float
  contains: Float
  notContains: Float
  between: [Float]
}

input TableIDFilterInput {
  ne: ID
  eq: ID
  le: ID
  lt: ID
  ge: ID
  gt: ID
  contains: ID
  notContains: ID
  between: [ID]
  beginsWith: ID
}

input TableIntFilterInput {
  ne: Int
  eq: Int
  le: Int
  lt: Int
  ge: Int
  gt: Int
  contains: Int
  notContains: Int
  between: [Int]
}

input TableStringFilterInput {
  ne: String
  eq: String
  le: String
  lt: String
  ge: String
  gt: String
  contains: String
  notContains: String
  between: [String]
  beginsWith: String
}

type DataPoint {
  name: ID!
  owner: String!
  createdAt: AWSDateTime!
  value: Int
}

type DataPointConnection {
  items: [DataPoint]
  nextToken: String
}

input CreateDataPointInput {
  name: ID!
  createdAt: AWSDateTime
  value: Int
}

input UpdateDataPointInput {
  name: ID!
  createdAt: AWSDateTime!
  value: Int
}

input DeleteDataPointInput {
  name: ID!
  createdAt: AWSDateTime!
}

enum ModelSortDirection {
  ASC
  DESC
}

input ModelStringKeyConditionInput {
  eq: String
  le: String
  lt: String
  ge: String
  gt: String
  between: [String]
  beginsWith: String
}

input TableDataPointFilterInput {
  name: TableIDFilterInput
  createdAt: TableStringFilterInput
  value: TableIntFilterInput
}
